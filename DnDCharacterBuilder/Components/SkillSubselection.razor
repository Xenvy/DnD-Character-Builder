@inject ISkillData skillData
@inject ICharacterSheetData characterSheetData

<div class="autocomplete">
	<div class="option-selection">
		<button class="btn btn-outline-dark" @onclick="(_ => showSkillSelect = !showSkillSelect)">Select a skill</button>
		@if (showSkillSelect)
		{
			<!-- Autocomplete-style selection of character's spells -->
			<input type="text"
				   id="skillSelection"
				   placeholder="Select a skill..."
				   class="form-control filter"
				   aria-label="Search box"
				   @bind-value="skillSearchText"
				   @oninput="((txt) => OnSkillSearchInput((string)txt.Value))"
				   @onfocusin="(_ => showSkillSelect = !showSkillSelect)"
				   @onfocusout="(_ => OnSkillSelection())" />
			<div class="option-list">
				<ul name="skillSelectionList" class="options">
					@if (skills?.Count > 0)
					{
						@foreach (var s in skills)
						{
							<li class="option" @onclick="(_ => AddSkill(s))">
								<span class="option-text">@s.Name</span>
							</li>
						}
					}
					else
					{
						<li class="disabled option">No results</li>
					}
				</ul>
			</div>
		}
	</div>
</div>

@code {

	protected async override Task OnInitializedAsync()
	{
		// Determine if it's proficiency or expertise selection
		if (skillExpertise is null || tagArguments is not null)
		{
			var s = await characterSheetData.GetSkills();
			// Is the selection limited?
			if (tagArguments?.Count > 0)
			{
				// Limit the choices to those provided in tag arguments
				foreach (var a in tagArguments)
				{
					skills.Add(s.Find(x => x.Id == int.Parse(a)));
				}
			}
			else
			{
				// In this case it's unrestricted selection
				skills = s;
			}
		}
		else
		{
			// In this case it's expertise selection, so the source is current skill proficiencies
			skills = skillProficiencies;
		}
	}

	[Parameter]
	public List<Skill>? skillProficiencies { get; set; }

	[Parameter]
	public List<Skill>? skillExpertise { get; set; }

	[Parameter]
	public List<string>? tagArguments { get; set; }

	[Parameter]
	public string[]? tagData { get; set; }

	[Parameter]
	public EventCallback<string[]> tagDataChanged { get; set; }

	private List<Skill> skills = new();
	private string skillSearchText;
	private bool showSkillSelect = false;
	CancellationTokenSource tokenSource;

	private async Task OnSkillSelection()
	{
		tokenSource = new CancellationTokenSource();
		await Task.Factory.StartNew(async () =>
		{
			await Task.Delay(100);
			showSkillSelect = false;
			await InvokeAsync(StateHasChanged);
		}, tokenSource.Token);
	}

	private async Task AddSkill(Skill skill)
	{
		// Determine if it's proficiency or expertise selection
		if(skillExpertise is null)
		{
			skillProficiencies.Add(skill);
		}
		else
		{
			// If it's an expertise selection, but there are tag arguments, it also add the corresponding skill proficiency.
			if(tagArguments is not null)
			{
				skillProficiencies.Add(skill);
			}
			skillExpertise.Add(skill);
		}
		tagData[0] = skill.Id.ToString();
		tagData[1] = skill.Name;
		await OnSkillSearchInput("");
		await tagDataChanged.InvokeAsync(tagData);
	}

	private async Task OnSkillSearchInput(string searchInput)
	{
		skillSearchText = searchInput;
		await FilterSkills();
	}

	private async Task FilterSkills()
	{
		List<Skill> output = new();

		// Determine if it's proficiency or expertise selection
		if (skillExpertise is null || tagArguments is not null)
		{
			var s = await characterSheetData.GetSkills();
			// Is the selection limited?
			if (tagArguments?.Count > 0)
			{
				// Limit the choices to those provided in tag arguments
				foreach (var a in tagArguments)
				{
					output.Add(s.Find(x => x.Id == int.Parse(a)));
				}
			}
			else
			{
				// In this case it's unrestricted selection
				output = s;
			}
		}
		else
		{
			// In this case it's expertise selection, so the source is current skill proficiencies
			output = skillProficiencies.ToList();
		}

		if (string.IsNullOrWhiteSpace(skillSearchText) == false)
		{
			output = output.Where(x => x.Name.Contains(skillSearchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
		}

		skills = output;
	}

}
